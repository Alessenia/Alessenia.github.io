<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>My Static Blog</title><link>http://example.com/blog/index.html</link>
<description>A blog about how software affects education</description><language>en</language>
<lastBuildDate>Sun, 07 May 2023 22:22:56 +0000</lastBuildDate>
<pubDate>Sun, 07 May 2023 22:22:56 +0000</pubDate>
<atom:link href="http://example.com/blog/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Kristen Nygaard&rsquo;s Biography
</title><description><![CDATA[

<p>Kristen Nygaard, in collaboration with Ole-Johan Dahl, created Simula 67, who is also known as Simula and is considered as the first objectification
Planning language since it was the first to bring characteristics such as class, object as well as concepts such as heredity and subclasses.
These concepts were the basis of not only today&rsquo;s programming languages, but also for Smalltalk. Nygaard was the one who had
The initial ideas for Simula, so in 1960, the creation of the Norwegian Computer Center as a Research Institute and contacted Dahl.
By the end of his life, Kristen Nygaard had dedicated the focus of his research to objectivity.</p>

<p>Initially Simula was intended as a programming language that could simulate complex systems. Kristen and Dahl were interested in simulating
Systems.H this original version of Simula I, would not be popular. So they returned to its processing and this time they wanted to create a language
Programming that could model these systems in a manner not only in programmers but also to other partners who were not necessary
Developers. Based on Algol-60, Simula 67 (known as Simula) was developed between 1962 and 1967. Simula was designed to support creation
Simulations by allowing developers to define objects that represent different elements of the system that are modeling and to identify
At the same time how these objects interact with each other. This approach facilitated the creation of complex simulations and modification
depending on the various needs of the developers.</p>

<p><img src="/images/dahl_nygaard.jpg" alt="Kristen and Ole" /></p>

<p>What made Simula stand out by far from other programming languages that time was beyond objects and classes,
heredity. Kristen Nyygard is the one who first created the concept of inheritance and realized that he himself solved a big problem that along with
Dahl faced during the creation of Simula. At the same time, this concept as we know today is critical as it gives the opportunity
Reusing code block, resulting in unnecessary repetitions of code lines and the end result is more simplified and comprehensive.
Heredity allows the creation of a hierarchy of classes sharing common characteristics and behavior, making the code more organized and
easier to maintain. <em>This concept has paved the way for designing more flexible systems and is one of the fundamental concepts of objectives
In addition to his valuable contribution to the objective programming, Kristen was a staunch supporter of cooperation, which is evident
And from the team creation of Simula. Therefore, in the context of the tools for making software, Nygaard left one of the most valuable, in our hands,
that of objective. Alan Kay was inspired by the basic ideas that Simula (1967) and Sketchpad (1988) had introduced very early
Alan&rsquo;s pioneering view of the consolidation of objects resulted in the creation of Smalltalk which was the first complete
Objective language, after in addition to heredity, he also supported the rest of the objective, polymorphism and encounter.
Kay was highly appreciated by both Ole-Dahl and Kristen Nyygard. </em>O Kristen Nygaard and Alan Kay may have had different aspirations in terms of
Objectively programming, however
creativity.*</p>

<p>To learn more about the author and the references, <a href="https://github.com/Alessenia/sw/tree/2019165/projects/2019165#%CF%80%CE%B1%CF%81%CE%B1%CE%B4%CE%BF%CF%84%CE%AD%CE%BF-9---%CF%83%CF%85%CE%BC%CE%BC%CE%B5%CF%84%CE%BF%CF%87%CE%B9%CE%BA%CF%8C-%CF%80%CE%B5%CF%81%CE%B9%CE%B5%CF%87%CF%8C%CE%BC%CE%B5%CE%BD%CE%BF-%CE%B22">click here</a>.</p>

<p>Tags: <a href='tag_Simula.html'>Simula</a>, <a href='tag_Kristen-Nygaard.html'>Kristen-Nygaard</a>, <a href='tag_object-oriented-programming.html'>object-oriented-programming</a>, <a href='tag_inheritance.html'>inheritance</a></p>


<!-- text end -->
]]></description><link>http://example.com/blog/kristen-nygaardrsquos-biography.html</link>
<guid>http://example.com/blog/./kristen-nygaardrsquos-biography.html</guid>
<dc:creator>Alessenia</dc:creator>
<pubDate>Sun, 07 May 2023 22:08:18 +0000</pubDate></item>
<item><title>
The Croquet platform
</title><description><![CDATA[

<p>The creation of Croquet in 2001 was based on the fundamental need for a more effective and direct communication between developers and more generally
Various groups that sought to cooperate in real -time, in addition to the restrictions that the tools of the season, namely the messages and electronic restrictions,
post office. Alan Kay and his associates believed that classic workplace transfer was restrictive and wanted to create a more flexible and
Dynamic environment that would allow users to work uninterruptedly and regardless of their location to make creation more productive
Interactive software and not only. So, deprived of Douglas Engelbart&rsquo;s view of deep cooperative systems, direct handling of graphics
Items introduced by Ivan Sutherland and taking advantage of Smalltalk&rsquo;s capacity, Kay and his team created the software platform
Croquet open source, a comprehensive development platform.</p>

<p>Croquet supports the collaboration between a group of users by providing access to a 3D graphics environment that users can create and
then use to tune in to him as a group either to go to any other graphic environment they want within the network, through portals,
making the environment of Croquet a shared virtual world and even fully modified. Croquet uses an architecture called Teatime,
which provides the basis for synchronizing objects in Peer-to-peer collaboration activities. The fact that Croquet has been written with Squeak as a base,
It provides in the application the advantages of objective programming to handle objects. The platform also uses some of the
Opportunities inspired by Smalltalk and in particular how to transmit messages. Croquet&rsquo;s messaging system is asynchronous and uses
a post-registration model for communication. Each object of Croquet has its own tail of events and receives messages as they arrive. When a message
It is sent to an object, added to the event tail of the object and processed by the object when ready. This allows
An extremely flexible communication system, which is a fundamental feature of both Smalltalk and Objective Programming in general.
Croquet allows users to process the source code of the three -dimensional world through the world itself and to see the result immediately,
While the world is still working without even the current program to terminate.
Croquet is a wonderful example of the possibilities offered by objectivity if used in the way Croquet has adopted,
that of Smalltalk. While the emphasis on other objective tongues is given to the state of objects, Smalltalk focuses on how they communicate
the objects between them. So we see that Alan&rsquo;s dynamic view has been the basis of both Smalltalk and Croquet. The application of this
Particularity is also evident in the operation of the Croquet where objects communicate with each other by sending messages through the network. In Croquet, each object
It has a unique identity and the messages are sent between objects using their identity. When an object receives a message, it may
either handle the message itself or promote it to another object for processing. This messaging system is the basis for cooperatives
Features of Croquet, such as common -time processing of objects and the ability to interact with objects controlled by
other users. <em>This style of communication between objects adopted by Smalltalk</em> is what stands out from the corresponding platforms.</p>

<p>So we conclude that a characteristic of the Croquet that made it extremely original is to support real -time cooperation.
Many users can interact with the same application in real time and even with the changes of a user becoming immediately visible to everyone else.
<em>A useful application of this particularity is in education</em>, where, for example, the platform has been used to create virtual classrooms
teaching where students can interact with each other but also with virtual objects.
Although the Croquet platform was extremely innovative and rich in features and capabilities,
She faced critical comments from users who described her as very abstract. At the same time, a disadvantage was considered the fact that it did not provide high security.
There is even the view that one of the main reasons why Croquet did not become as widespread as other platforms is that it was developed
At a time when the technological landscape was changing rapidly and many competitive platforms, but also new languages developed, such as Java that was then done all over
and more popular. As a result, many developers may have been more comfortable with the use of Java and other platforms that used it, which may
contribute to the relatively limited spread of Croquet in space. However, the innovative design and characteristics of Croquet continued to influence the
Developing collaborative, distributed systems and his heritage can be seen in many of the technologies used today.</p>

<p>And while initially, the use of the platform was intended to enhance cooperation between groups, over time expanded to
Educational and military uses, scientific simulations and online games and even today it continues to be tested as a platform
for various purposes. Today, Croquet continues to be released and enriched with modern technologies while it has been described as the functional
Metaverse system. <em>Alan Kay having initially funded his creation, remains the key adviser and mentor of the team to this day
of Croquet, inspiring the new generation of designers and managers, with the values and principles that pushed him into creating him.</em></p>

<p>Tags: <a href='tag_Croquet.html'>Croquet</a>, <a href='tag_case-study.html'>case-study</a></p>

<!-- text end -->
]]></description><link>http://example.com/blog/the-croquet-platform.html</link>
<guid>http://example.com/blog/./the-croquet-platform.html</guid>
<dc:creator>Alessenia</dc:creator>
<pubDate>Sun, 07 May 2023 17:28:52 +0000</pubDate></item>
<item><title>
Object Oriented Programming &amp; Education
</title><description><![CDATA[

<p>In terms of education, learning OOP can provide students with a strong foundation in programming concepts and practices.
 It can help them to develop their problem-solving and analytical skills, as well as their ability to work with complex systems.
 Additionally, OOP can be used to build scalable, maintainable software applications, which is important in many industries.</p>

<p>There are a variety of approaches to teaching OOP in education, including textbooks, online courses, and hands-on projects.
Some educators use popular programming languages like Java, Python, and C++ to teach OOP concepts, while others use dedicated OOP languages like Smalltalk and Ruby.
Regardless of the approach, the focus is typically on helping students to develop a strong understanding of OOP principles and best practices, as well as practical skills in writing object-oriented code.</p>

<p>Tags: <a href='tag_keep-this-tag-format.html'>keep-this-tag-format</a>, <a href='tag_tags-are-optional.html'>tags-are-optional</a>, <a href='tag_beware-with-underscores-in-markdown.html'>beware-with-underscores-in-markdown</a>, <a href='tag_example.html'>example</a></p>





<!-- text end -->
]]></description><link>http://example.com/blog/object-oriented-programming-amp-education.html</link>
<guid>http://example.com/blog/./object-oriented-programming-amp-education.html</guid>
<dc:creator>Alessenia</dc:creator>
<pubDate>Mon, 27 Mar 2023 22:42:57 +0000</pubDate></item>
</channel></rss>
